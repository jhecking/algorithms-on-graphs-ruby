#!/usr/bin/env ruby -w
# Generate directed, acyclic graphs for testing purposes
# All edges point from a vertex v with index v1 to different vertex w with
# index v2 where v1 < v2 to prevent cycles. (Though cycles are still possible
# if the graph is interpreted as an undirected graph.)
#
# Output is in the format used by the assignments.
#
# Usage: ./gen_dag v e
# Parameter:
# - v: number of vertices
# - e: number of edges
#
# Example:
# $ ./bin/gen_dag 5 4
# 5 4
# 4 5
# 2 4
# 1 2
# 3 4
#
require 'set'

(v, e) = ARGV.shift(2).map(&:to_i)

weight = false
cyclic = false
while (arg = ARGV.shift) do
  case arg
  when '-c', '--cyclic'
    cyclic = true
  when '-w', '--weight'
    weight = ARGV.shift.to_i
  end
end

edges = Set.new
count = 0
puts [v, e].join(' ')
begin
  a = rand(1..(v-1))
  b = rand((a+1)..v)
  a, b = b, a if cyclic && rand < 0.5
  edge = [a, b]
  edges.add?([a, b]) or next
  edge << rand(1..weight) if weight
  puts edge * ' '
  count += 1
end while count < e
